esphome:
  name: single-pow-hvm62k-48v-lip
  friendly_name: -Single POW-HVM6.2K-48V-LIP

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Anchors and Aliases from here: https://spacelift.io/blog/yaml$0
# Thanks to this thread!  https://github.com/softwarecrash/Solar2MQTT/discussions/209
# and this thread:  https://www.reddit.com/r/Esphome/comments/198lze3/looking_for_guidance_how_to_set_up_multiple/$0
# and this: https://devices.esphome.io/devices/Narada-NPFC$0

substitutions:
  tx_pin: GPIO10
  rx_pin: GPIO9
  id_suffix: ""
  name_suffix: ""
  modbus_id: modbus_id${id_suffix}
  uart_id: uart${id_suffix}
  modbus_controller_id: modbus_controller${id_suffix}
  update_seconds: "1s"
  write_skip: "60"

uart:
  - id: uart_id${id_suffix}
    baud_rate: 9600
    tx_pin: ${tx_pin}
    rx_pin: ${rx_pin}

modbus:
  - id: modbus_id${id_suffix}
    uart_id: uart_id${id_suffix}

modbus_controller:
  - id: modbus_controller_id${id_suffix}
    address: 0x01
    modbus_id: modbus_id${id_suffix}
    setup_priority: -10
    offline_skip_updates: 60
    update_interval: ${update_seconds}


# PROTOTYPE SENSORS Anchors/Aliases

# needs random . before name
# https://community.home-assistant.io/t/how-do-i-label-and-use-anchors/812692/6$0
.modbus_entity: &modbus_entity
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_id${id_suffix}
    id: _need_to_override_this

.modbus_sensor: &modbus_sensor
  - <<: *modbus_entity
    value_type: S_WORD
    state_class: measurement
    register_type: holding
    accuracy_decimals: 0

.modbus_volts: &modbus_volts
  - <<: *modbus_sensor
    device_class: voltage
    unit_of_measurement: "V"
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

.modbus_amps: &modbus_amps
  - <<: *modbus_sensor
    device_class: current
    unit_of_measurement: "A"
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

.modbus_watts: &modbus_watts
  - <<: *modbus_sensor
    device_class: power
    unit_of_measurement: "W"

.modbus_hz: &modbus_hz
  - <<: *modbus_sensor
    device_class: frequency
    unit_of_measurement: "Hz"
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

.modbus_percent: &modbus_percent
  - <<: *modbus_sensor
    device_class: battery
    unit_of_measurement: "%"

.modbus_temp: &modbus_temp
  - <<: *modbus_sensor
    device_class: temperature
    unit_of_measurement: "Â°C"
    accuracy_decimals: 1

.modbus_text: &modbus_text
  - <<: *modbus_entity
    register_type: holding
    response_size: 2
    raw_encode: HEXBYTES

.modbus_writable: &modbus_writable
  - <<: *modbus_entity
    entity_category: config
    use_write_multiple: true
    skip_updates: ${write_skip}

.modbus_switch: &modbus_switch
  - <<: *modbus_writable
    register_type: holding
    bitmask: 1

.modbus_number: &modbus_number
  - <<: *modbus_writable
    value_type: U_WORD

.modbus_select: &modbus_select
  - <<: *modbus_number

.modbus_number_volts: &modbus_number_volts
  - <<: *modbus_number
    device_class: voltage
    unit_of_measurement: "V"
    step: 0.1
    multiply: 10

.modbus_number_amps: &modbus_number_amps
  - <<: *modbus_number
    device_class: current
    unit_of_measurement: "A"
    step: 1
    multiply: 10

.modbus_number_percent: &modbus_number_percent
  - <<: *modbus_number
    device_class: battery
    unit_of_measurement: "%"
    step: 1


text_sensor:

  - <<: *modbus_text
    name: "Fault Code${name_suffix}"
    id: Fault_Code${id_suffix}
    address: 100
    response_size: 4
    lambda: |-
      uint32_t value = modbus_controller::dword_from_hex_str(x, 0);
      
      if (value==0) return std::string("None");
      std::string str = std::string(x);
      //int bit = 1;
      //do {
      //  if (value & 0x1) {
      //    str += std::string(" ") + switch(bit) {
      //      case 1: std::string("Over temperature of inverter module"); break;
      //      default: std::string(bit); break;
      //    }
      //  } ++bit;
      //} while ((value>>=1));
        
      if (value & 1<<0)  str.append(", Over temperature of inverter module"); // 1
      if (value & 1<<1)  str.append(", Over temperature of DCDC module"); // 2
      if (value & 1<<2)  str.append(", Battery over voltage"); // 3
      if (value & 1<<3)  str.append(", Over temperature of PV module"); // 4
      if (value & 1<<4)  str.append(", Output short circuited"); // 5
      if (value & 1<<5)  str.append(", Over Inverter voltage"); // 6
      if (value & 1<<6)  str.append(", Output over load"); // 7
      if (value & 1<<7)  str.append(", Bus over voltage"); // 8
      if (value & 1<<8)  str.append(", Bus soft start times out"); // 9
      if (value & 1<<9)  str.append(", PV over current"); // 10
      if (value & 1<<10) str.append(", PV over voltage"); // 11
      if (value & 1<<11) str.append(", Battery over current"); // 12
      if (value & 1<<12) str.append(", Inverter over current"); // 13
      if (value & 1<<13) str.append(", Bus low voltage"); // 14
      //if (value & 1<<14) str.append(", Reserve 15"); // 15
      if (value & 1<<15) str.append(", Inverter DC component is too high"); // 16
      //if (value & 1<<16) str.append(", Reserve 17"); // 17
      if (value & 1<<17) str.append(", The zero bias of Output current is too large"); // 18
      if (value & 1<<18) str.append(", The zero bias of inverter current is too large"); // 19
      if (value & 1<<19) str.append(", The zero bias of battery current is too large"); // 20
      if (value & 1<<20) str.append(", The zero bias of PV current is too large"); // 21
      if (value & 1<<21) str.append(", Inverter low voltage"); // 22
      if (value & 1<<22) str.append(", Inverter negative power protection"); // 23
      if (value & 1<<23) str.append(", The host in the parallel system is lost"); // 24
      if (value & 1<<24) str.append(", Synchronization signal abnormal in the parallel system"); // 25
      if (value & 1<<25) str.append(", The battery type is incompatible"); // 26
      if (value & 1<<26) str.append(", Parallel versions are incompatible"); // 27
      return str;
  # could replate above "register_count: 2" with 8 to cover gap 103-107

  - <<: *modbus_text
    name: "Warning Code${name_suffix}"
    id: Warning_Code${id_suffix}
    address: 108
    response_size: 4
    lambda: |-
      uint32_t value = modbus_controller::dword_from_hex_str(x, 0);
      
      if (value==0) return std::string("None");
      std::string str = std::string(x);
      //if (value & 1<<0)  str.append(", Bit 0"); // 1 this bit seems to be always set?
      if (value & 1<<1)  str.append(", Mains waveform abnormal"); // 1
      //if (value & 1<<2)  str.append(", Bit 2"); // 2
      if (value & 1<<3)  str.append(", Mains low voltage"); // 3
      if (value & 1<<4)  str.append(", Mains over frequency"); // 4
      if (value & 1<<5)  str.append(", Mains low frequency"); // 5
      //if (value & 1<<6)  str.append(", PV low voltage"); // 6 //// COMMENTING THIS ERROR OUT SINCE IT'S TERRIBLE AT NIGHT
      if (value & 1<<7)  str.append(", Over temperature"); // 7
      if (value & 1<<8)  str.append(", Battery low voltage"); // 8
      if (value & 1<<9)  str.append(", Battery is not connected"); // 9
      if (value & 1<<10) str.append(", Overload"); // 10
      if (value & 1<<11) str.append(", Battery Eq charging"); // 11
      if (value & 1<<12) str.append(", Battery is discharged at a low voltage and it has not been charged back to the recovery point"); // 12
      if (value & 1<<13) str.append(", Output power derating"); // 13
      if (value & 1<<14) str.append(", Fan blocked"); // 14
      if (value & 1<<15) str.append(", PV energy is too low to be used"); // 15
      if (value & 1<<16) str.append(", Parallel communication interrupted"); // 16
      if (value & 1<<17) str.append(", Output mode of Single and Parallel systems is inconsistent"); // 17
      if (value & 1<<18) str.append(", Battery voltage difference of parallel system is too large"); // 18
      //if ((value>>19))   str.append(", Bits 19-31"); // 19
      return str;
  
  - <<: *modbus_entity
    name: "Working Mode${name_suffix}"
    id: Working_Mode${id_suffix}
    address: 201
    register_type: holding
    response_size: 2
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0: return std::string("Power On Mode");
        case 1: return std::string("Standby mode");
        case 2: return std::string("Mains mode");
        case 3: return std::string("Off-Grid mode");
        case 4: return std::string("Bypass mode");
        case 5: return std::string("Charging mode");
        case 6: return std::string("Fault mode");        
        default: return std::string(x);
      } return x;  

#FIXME  Series NO. ASC address 186 registers 12 Read


sensor:
  
  - <<: *modbus_volts
    name: "Mains Voltage${name_suffix}"
    id: Mains_Voltage${id_suffix}
    address: 202
    accuracy_decimals: 0 # still want this?

  - <<: *modbus_hz
    name: "Mains Frequency${name_suffix}"
    id: Mains_Frequency${id_suffix}
    address: 203

  - <<: *modbus_watts
    name: "Mains Power${name_suffix}"
    id: Mains_Power${id_suffix}
    address: 204

  - <<: *modbus_volts
    name: "Inverter Voltage${name_suffix}"
    id: Inverter_Voltage${id_suffix}
    address: 205

  - <<: *modbus_amps
    name: "Inverter Current${name_suffix}"
    id: Inverter_Current${id_suffix}
    address: 206

  - <<: *modbus_hz
    name: "Inverter Frequency${name_suffix}"
    id: Inverter_Frequency${id_suffix}
    address: 207

  - <<: *modbus_watts
    name: "Inverter Power${name_suffix}"
    id: Inverter_Power${id_suffix}
    address: 208
 
  - <<: *modbus_watts
    name: "Inverter Charging Power${name_suffix}"
    id: Inverter_Charging_Power${id_suffix}
    address: 209

  - <<: *modbus_volts
    name: "Output Voltage${name_suffix}"
    id: Output_Voltage${id_suffix}
    address: 210

  - <<: *modbus_amps
    name: "Output Current${name_suffix}"
    id: Output_Current${id_suffix}
    address: 211

  - <<: *modbus_hz
    name: "Output Frequency${name_suffix}"
    id: Output_Frequency${id_suffix}
    address: 212

  - <<: *modbus_watts
    name: "Output Active Power${name_suffix}"
    id: Output_Active_Power${id_suffix}
    address: 213
    
  - <<: *modbus_watts # actually VA
    name: "Output Apparent Power${name_suffix}"
    id: Output_Apparent_Power${id_suffix}
    address: 214
    device_class: apparent_power
    unit_of_measurement: "VA"

  - <<: *modbus_volts
    name: "Battery Voltage${name_suffix}"
    id: Battery_Voltage${id_suffix}
    address: 215
      
  - <<: *modbus_amps
    name: "Battery Current${name_suffix}"
    id: Battery_Current${id_suffix}
    address: 216

  - <<: *modbus_watts
    name: "Battery Power${name_suffix}"
    id: Battery_Power${id_suffix}
    address: 217
    register_count: 2          # address 218 Internal Command
     
  - <<: *modbus_volts
    name: "PV Voltage${name_suffix}"
    id: PV_Voltage${id_suffix}
    address: 219
    accuracy_decimals: 0 # still want this?

  - <<: *modbus_amps
    name: "PV Current${name_suffix}"
    id: PV_Current${id_suffix}
    address: 220
    register_count: 3     # 221-222 Reserved

  - <<: *modbus_watts
    name: "PV Power${name_suffix}"
    id: PV_Power${id_suffix}
    address: 223

  - <<: *modbus_watts
    name: "PV Charging Power${name_suffix}"
    id: PV_Charging_Power${id_suffix}
    address: 224

  - <<: *modbus_percent
    name: "Inverter Load${name_suffix}"
    id: Inverter_Load_Percentage${id_suffix}
    address: 225
    device_class: "" # leave it as battery?
  
  - <<: *modbus_temp
    name: "Temperature DC-DC${name_suffix}"
    id: Temperature_DCDC${id_suffix}
    address: 226
  
  - <<: *modbus_temp
    name: "Temperature Inverter${name_suffix}"
    id: Temperature_Inverter${id_suffix}
    address: 227
    register_count: 2     # 228 Reserved

  - <<: *modbus_percent
    name: "Battery Percentage${name_suffix}"
    id: Battery_Percentage${id_suffix}
    address: 229
    value_type: U_WORD # shouldn't really matter, not getting big enough values
    register_count: 3     # 230 Internal, 231 Reserved

  - <<: *modbus_amps
    name: "Battery Current 232${name_suffix}"
    id: Battery_Current_ID_232${id_suffix}
    address: 232

  - <<: *modbus_amps
    name: "Inverter Charging Current${name_suffix}"
    id: Inverter_Charging_Current${id_suffix}
    address: 233

  - <<: *modbus_amps
    name: "PV Charging Current${name_suffix}"
    id: PV_Charging_Current${id_suffix}
    address: 234

# 235-299 reserverd or invalid


select:

  - <<: *modbus_select
    name: "Output Mode${name_suffix}"
    id: Output_Mode${id_suffix}
    address: 300
    optionsmap:
      "Single": 0
      "Parallel": 1
      "3 Phase P1": 2
      "3 Phase P2": 3
      "3 Phase P3": 4

  - <<: *modbus_select
    name: "Output Priority${name_suffix}"
    id: Output_Priority${id_suffix}
    address: 301
    optionsmap:  #FIXME manual has SOL, Uti, Sbu, Sub in that order
      "Utility-Only": 0
      "PV-Only": 1
      "PV-Battery-Utility": 2
      "PV-Utility-Battery" : 3

  - <<: *modbus_select
    name: "Input Voltage Range${name_suffix}"
    id: Input_Voltage_Range${id_suffix}
    address: 302
    optionsmap:  #FIXME manual has APL, UPS, GNt
      "Wide range": 0
      "Narrow range": 1

  - <<: *modbus_select
    name: "Buzzer Mode${name_suffix}"
    id: Buzzer_Mode${id_suffix}
    address: 303
    optionsmap:
      "Mute all": 0
      "Beep source": 1
      "Beep warning": 2
      "Beep fault": 3
    register_count: 2     # 304 Reserved, 305... is switch, below

  - <<: *modbus_select
    name: "Battery Charging Priority${name_suffix}"
    id: Battery_Charging_Priority${id_suffix}
    address: 331
    optionsmap:
      "Utility priority": 0
      "PV priority": 1
      "PV and Utility": 2
      "Only PV charging": 3

  - <<: *modbus_select
    name: "Remote Turn On Mode${name_suffix}"
    id: Remote_Turn_On_Mode${id_suffix}
    address: 406
    optionsmap:
      "Locally or remotely": 0
      "Only local": 1
      "Only remote": 2


number:

  - <<: *modbus_number_volts
    name: "Output Voltage Setting${name_suffix}"
    id: Output_Voltage_Setting${id_suffix}
    address: 320
    min_value: 220
    max_value: 240
    step: 10

  - <<: *modbus_number
    name: "Output Frequency Setting${name_suffix}"
    id: Output_Frequency_Setting${id_suffix}
    address: 321
    device_class: frequency
    unit_of_measurement: "Hz"
    min_value: 50
    max_value: 60
    step: 10
    multiply: 100

#Reserve 322 1 Reserve address

  - <<: *modbus_number_volts
    name: "Battery Overvoltage Protection Point${name_suffix}"
    id: Battery_Protection_Overvoltage${id_suffix}
    address: 323
#    min_value: 40 #FIXME
#    max_value: 54

  - <<: *modbus_number_volts
    name: "Battery Bulk Charging Voltage${name_suffix}"
    id: Battery_Bulk_Charging_Voltage${id_suffix}
    address: 324
    min_value: 48
    max_value: 62
    
  - <<: *modbus_number_volts
    name: "Battery Float Charging Voltage${name_suffix}"
    id: Battery_Float_Charging_Voltage${id_suffix}
    address: 325
    min_value: 48
    max_value: 62

  - <<: *modbus_number_volts
    name: "Battery Recovery Voltage (to Battery) in SBU Mode${name_suffix}"
    id: Battery_Recovery_Voltage${id_suffix}
    address: 326
    min_value: 48 #FIXME (what is "FULL" setting?)
    max_value: 62

  - <<: *modbus_number_volts
    name: "Battery Protection Voltage (to Mains) in SBU mode${name_suffix}"
    id: Battery_Protection_Voltage${id_suffix}
    address: 327
    min_value: 44
    max_value: 55 #FIXME manual says up to 57.2?
    # register_count: 2     # 328 Reserved

  - <<: *modbus_number_volts
    name: "Battery Low Cutoff Voltage in Off-Grid Mode${name_suffix}"
    id: Battery_Cutoff_Voltage${id_suffix}
    address: 329
    min_value: 40
    max_value: 54
    # register_count: 2     # 330 Reserved
  #331 in options

  - <<: *modbus_number_amps
    name: "Battery Maximum Total Charging Current${name_suffix}"
    id: Battery_Max_Total_Charging_Current${id_suffix}
    entity_category: config
    address: 332
    min_value: 10
    max_value: 120  #FIXME manual says 80??
    step: 10

  - <<: *modbus_number_amps
    id: Battery_Mains_Total_Charging_Current${id_suffix}
    name: "Battery Maximum Mains Charging Current${name_suffix}"
    address: 333
    min_value: 0  #FIXME min is 2, then 10,20,...80
    max_value: 80
    step: 10

  - <<: *modbus_number_volts
    name: "Battery Equalization Voltage${name_suffix}"
    id: Battery_Equalization_Voltage${id_suffix}
    address: 334
    min_value: 48
    max_value: 64

  - <<: *modbus_number
    name: "Battery Equalization Time${name_suffix}"
    id: Battery_Equalization_Time${id_suffix}
    address: 335
    device_class: duration
    unit_of_measurement: "min"
    min_value: 0
    max_value: 900
    step: 5

  - <<: *modbus_number
    name: "Battery Equalization Timeout${name_suffix}"
    id: Battery_Equalization_Timeout${id_suffix}
    address: 336
    device_class: duration
    unit_of_measurement: "min"
    min_value: 0
    max_value: 900
    step: 5

  - <<: *modbus_number
    name: "Battery Equalization Interval${name_suffix}"
    id: Battery_Equalization_Interval${id_suffix}
    address: 337
    device_class: duration
    unit_of_measurement: "d"
    min_value: 1
    max_value: 90

# Reserve 338 1 Reserve address

# Use these if battery is connected and communicating with inverter #

  - <<: *modbus_number_percent
    name: "Battery Protection SOC (to Mains) in SBU Mode${name_suffix}"
    id: Battery_Protection_SOC${id_suffix}
    address: 341
    min_value: 5
    max_value: 50

  - <<: *modbus_number_percent
    name: "Battery Recovery SOC (to Battery) in SBU Mode${name_suffix}"
    id: Battery_Recovery_SOC${id_suffix}
    address: 342
    min_value: 60
    max_value: 100

  - <<: *modbus_number_percent
    name: "Battery Low Cutoff SOC in Off-grid Mode${name_suffix}"
    id: Battery_Cutoff_SOC${id_suffix}
    address: 343
    min_value: 3
    max_value: 30 ### !!! Must be lower then "Mains mode battery discharge SOC protection value"


switch:

  - <<: *modbus_switch
    name: "LCD Backlight${name_suffix}"
    id: LCD_Backlight${id_suffix}
    address: 305

  - <<: *modbus_switch
    name: "LCD Return to First Screen${name_suffix}"
    id: LCD_Return${id_suffix}
    address: 306
    
  - <<: *modbus_switch
    name: "Power-saving Mode${name_suffix}"
    id: Power_Saving_Mode${id_suffix}
    address: 307

  - <<: *modbus_switch
    name: "Overload Automatic Restart${name_suffix}"
    id: Overload_Automatic_Restart${id_suffix}
    address: 308

  - <<: *modbus_switch
    name: "Overtemperature Automatic Restart${name_suffix}"
    id: Overtemperature_Automatic_Restart${id_suffix}
    address: 309

  - <<: *modbus_switch
    name: "Overload Transfer to Bypass${name_suffix}"
    id: Overload_Automatic_Bypass${id_suffix}
    address: 310

  - <<: *modbus_switch
    name: "Remote Power Switch${name_suffix}"
    id: Remote_Power_Switch${id_suffix}
    address: 420
    icon: "mdi:toggle-switch"
    
